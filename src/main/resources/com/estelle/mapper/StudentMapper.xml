<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.estelle.mapper.StudentMapper">
	<resultMap id="BaseResultMap" type="com.estelle.bean.Student">
		<id column="id" property="id" jdbcType="INTEGER" />
		<result column="no" property="no" jdbcType="VARCHAR" />
		<result column="name" property="name" jdbcType="VARCHAR" />
		<result column="tel" property="tel" jdbcType="VARCHAR" />
		<result column="idcard" property="idcard" jdbcType="VARCHAR" />
		<result column="gender" property="gender" jdbcType="VARCHAR" />
		<result column="real_pwd" property="realPwd" jdbcType="VARCHAR" />
		<result column="default_pwd" property="defaultPwd"
			jdbcType="VARCHAR" />
		<result column="role" property="role" jdbcType="VARCHAR" />
		<result column="college" property="college" jdbcType="VARCHAR" />
		<result column="class_no" property="classNo" jdbcType="VARCHAR" />
		<result column="native_place" property="nativePlace"
			jdbcType="VARCHAR" />
		<result column="home_det_add" property="homeDetAdd"
			jdbcType="VARCHAR" />
		<result column="apply_back_sch" property="applyBackSch"
			jdbcType="VARCHAR" />
		<result column="apply_status" property="applyStatus"
			jdbcType="VARCHAR" />
	</resultMap>
	<sql id="Example_Where_Clause">
		<where>
			<foreach collection="oredCriteria" item="criteria"
				separator="or">
				<if test="criteria.valid">
					<trim prefix="(" suffix=")" prefixOverrides="and">
						<foreach collection="criteria.criteria" item="criterion">
							<choose>
								<when test="criterion.noValue">
									and ${criterion.condition}
								</when>
								<when test="criterion.singleValue">
									and ${criterion.condition} #{criterion.value}
								</when>
								<when test="criterion.betweenValue">
									and ${criterion.condition} #{criterion.value} and
									#{criterion.secondValue}
								</when>
								<when test="criterion.listValue">
									and ${criterion.condition}
									<foreach collection="criterion.value" item="listItem"
										open="(" close=")" separator=",">
										#{listItem}
									</foreach>
								</when>
							</choose>
						</foreach>
					</trim>
				</if>
			</foreach>
		</where>
	</sql>
	<sql id="Update_By_Example_Where_Clause">
		<where>
			<foreach collection="example.oredCriteria" item="criteria"
				separator="or">
				<if test="criteria.valid">
					<trim prefix="(" suffix=")" prefixOverrides="and">
						<foreach collection="criteria.criteria" item="criterion">
							<choose>
								<when test="criterion.noValue">
									and ${criterion.condition}
								</when>
								<when test="criterion.singleValue">
									and ${criterion.condition} #{criterion.value}
								</when>
								<when test="criterion.betweenValue">
									and ${criterion.condition} #{criterion.value} and
									#{criterion.secondValue}
								</when>
								<when test="criterion.listValue">
									and ${criterion.condition}
									<foreach collection="criterion.value" item="listItem"
										open="(" close=")" separator=",">
										#{listItem}
									</foreach>
								</when>
							</choose>
						</foreach>
					</trim>
				</if>
			</foreach>
		</where>
	</sql>
	<sql id="Base_Column_List">
		id, no, name, tel, idcard, gender, real_pwd, default_pwd, role, college,
		class_no,
		native_place, home_det_add, apply_back_sch, apply_status
	</sql>
	<select id="selectByExample" resultMap="BaseResultMap"
		parameterType="com.estelle.bean.StudentExample">
		select
		<if test="distinct">
			distinct
		</if>
		<include refid="Base_Column_List" />
		from student
		<if test="_parameter != null">
			<include refid="Example_Where_Clause" />
		</if>
		<if test="orderByClause != null">
			order by ${orderByClause}
		</if>
	</select>
	<select id="selectByPrimaryKey" resultMap="BaseResultMap"
		parameterType="java.lang.Integer">
		select
		<include refid="Base_Column_List" />
		from student
		where id = #{id,jdbcType=INTEGER}
	</select>
	<delete id="deleteByPrimaryKey"
		parameterType="java.lang.Integer">
		delete from student
		where id = #{id,jdbcType=INTEGER}
	</delete>
	<delete id="deleteByExample"
		parameterType="com.estelle.bean.StudentExample">
		delete from student
		<if test="_parameter != null">
			<include refid="Example_Where_Clause" />
		</if>
	</delete>
	<insert id="insert" parameterType="com.estelle.bean.Student">
		insert into student (id, no, name,
		tel, idcard, gender,
		real_pwd, default_pwd, role,
		college, class_no, native_place,
		home_det_add, apply_back_sch, apply_status
		)
		values (#{id,jdbcType=INTEGER}, #{no,jdbcType=VARCHAR},
		#{name,jdbcType=VARCHAR},
		#{tel,jdbcType=VARCHAR}, #{idcard,jdbcType=VARCHAR}, #{gender,jdbcType=VARCHAR},
		#{realPwd,jdbcType=VARCHAR}, #{defaultPwd,jdbcType=VARCHAR},
		#{role,jdbcType=VARCHAR},
		#{college,jdbcType=VARCHAR}, #{classNo,jdbcType=VARCHAR}, #{nativePlace,jdbcType=VARCHAR},
		#{homeDetAdd,jdbcType=VARCHAR}, #{applyBackSch,jdbcType=VARCHAR},
		#{applyStatus,jdbcType=VARCHAR}
		)
	</insert>
	<insert id="insertSelective"
		parameterType="com.estelle.bean.Student">
		insert into student
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<if test="id != null">
				id,
			</if>
			<if test="no != null">
				no,
			</if>
			<if test="name != null">
				name,
			</if>
			<if test="tel != null">
				tel,
			</if>
			<if test="idcard != null">
				idcard,
			</if>
			<if test="gender != null">
				gender,
			</if>
			<if test="realPwd != null">
				real_pwd,
			</if>
			<if test="defaultPwd != null">
				default_pwd,
			</if>
			<if test="role != null">
				role,
			</if>
			<if test="college != null">
				college,
			</if>
			<if test="classNo != null">
				class_no,
			</if>
			<if test="nativePlace != null">
				native_place,
			</if>
			<if test="homeDetAdd != null">
				home_det_add,
			</if>
			<if test="applyBackSch != null">
				apply_back_sch,
			</if>
			<if test="applyStatus != null">
				apply_status,
			</if>
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides=",">
			<if test="id != null">
				#{id,jdbcType=INTEGER},
			</if>
			<if test="no != null">
				#{no,jdbcType=VARCHAR},
			</if>
			<if test="name != null">
				#{name,jdbcType=VARCHAR},
			</if>
			<if test="tel != null">
				#{tel,jdbcType=VARCHAR},
			</if>
			<if test="idcard != null">
				#{idcard,jdbcType=VARCHAR},
			</if>
			<if test="gender != null">
				#{gender,jdbcType=VARCHAR},
			</if>
			<if test="realPwd != null">
				#{realPwd,jdbcType=VARCHAR},
			</if>
			<if test="defaultPwd != null">
				#{defaultPwd,jdbcType=VARCHAR},
			</if>
			<if test="role != null">
				#{role,jdbcType=VARCHAR},
			</if>
			<if test="college != null">
				#{college,jdbcType=VARCHAR},
			</if>
			<if test="classNo != null">
				#{classNo,jdbcType=VARCHAR},
			</if>
			<if test="nativePlace != null">
				#{nativePlace,jdbcType=VARCHAR},
			</if>
			<if test="homeDetAdd != null">
				#{homeDetAdd,jdbcType=VARCHAR},
			</if>
			<if test="applyBackSch != null">
				#{applyBackSch,jdbcType=VARCHAR},
			</if>
			<if test="applyStatus != null">
				#{applyStatus,jdbcType=VARCHAR},
			</if>
		</trim>
	</insert>
	<select id="countByExample"
		parameterType="com.estelle.bean.StudentExample"
		resultType="java.lang.Integer">
		select count(*) from student
		<if test="_parameter != null">
			<include refid="Example_Where_Clause" />
		</if>
	</select>
	
	<update id="updateByExampleSelective" parameterType="map">
		update student
		<set>
			<if test="record.id != null">
				id = #{record.id,jdbcType=INTEGER},
			</if>
			<if test="record.no != null">
				no = #{record.no,jdbcType=VARCHAR},
			</if>
			<if test="record.name != null">
				name = #{record.name,jdbcType=VARCHAR},
			</if>
			<if test="record.tel != null">
				tel = #{record.tel,jdbcType=VARCHAR},
			</if>
			<if test="record.idcard != null">
				idcard = #{record.idcard,jdbcType=VARCHAR},
			</if>
			<if test="record.gender != null">
				gender = #{record.gender,jdbcType=VARCHAR},
			</if>
			<if test="record.realPwd != null">
				real_pwd = #{record.realPwd,jdbcType=VARCHAR},
			</if>
			<if test="record.defaultPwd != null">
				default_pwd = #{record.defaultPwd,jdbcType=VARCHAR},
			</if>
			<if test="record.role != null">
				role = #{record.role,jdbcType=VARCHAR},
			</if>
			<if test="record.college != null">
				college = #{record.college,jdbcType=VARCHAR},
			</if>
			<if test="record.classNo != null">
				class_no = #{record.classNo,jdbcType=VARCHAR},
			</if>
			<if test="record.nativePlace != null">
				native_place = #{record.nativePlace,jdbcType=VARCHAR},
			</if>
			<if test="record.homeDetAdd != null">
				home_det_add = #{record.homeDetAdd,jdbcType=VARCHAR},
			</if>
			<if test="record.applyBackSch != null">
				apply_back_sch = #{record.applyBackSch,jdbcType=VARCHAR},
			</if>
			<if test="record.applyStatus != null">
				apply_status = #{record.applyStatus,jdbcType=VARCHAR},
			</if>
		</set>
		<if test="_parameter != null">
			<include refid="Update_By_Example_Where_Clause" />
		</if>
	</update>
	<update id="updateByExample" parameterType="map">
		update student
		set id = #{record.id,jdbcType=INTEGER},
		no = #{record.no,jdbcType=VARCHAR},
		name = #{record.name,jdbcType=VARCHAR},
		tel = #{record.tel,jdbcType=VARCHAR},
		idcard = #{record.idcard,jdbcType=VARCHAR},
		gender = #{record.gender,jdbcType=VARCHAR},
		real_pwd = #{record.realPwd,jdbcType=VARCHAR},
		default_pwd = #{record.defaultPwd,jdbcType=VARCHAR},
		role = #{record.role,jdbcType=VARCHAR},
		college = #{record.college,jdbcType=VARCHAR},
		class_no = #{record.classNo,jdbcType=VARCHAR},
		native_place = #{record.nativePlace,jdbcType=VARCHAR},
		home_det_add = #{record.homeDetAdd,jdbcType=VARCHAR},
		apply_back_sch = #{record.applyBackSch,jdbcType=VARCHAR},
		apply_status = #{record.applyStatus,jdbcType=VARCHAR}
		<if test="_parameter != null">
			<include refid="Update_By_Example_Where_Clause" />
		</if>
	</update>
	<update id="updateByPrimaryKeySelective"
		parameterType="com.estelle.bean.Student">
		update student
		<set>
			<if test="no != null">
				no = #{no,jdbcType=VARCHAR},
			</if>
			<if test="name != null">
				name = #{name,jdbcType=VARCHAR},
			</if>
			<if test="tel != null">
				tel = #{tel,jdbcType=VARCHAR},
			</if>
			<if test="idcard != null">
				idcard = #{idcard,jdbcType=VARCHAR},
			</if>
			<if test="gender != null">
				gender = #{gender,jdbcType=VARCHAR},
			</if>
			<if test="realPwd != null">
				real_pwd = #{realPwd,jdbcType=VARCHAR},
			</if>
			<if test="defaultPwd != null">
				default_pwd = #{defaultPwd,jdbcType=VARCHAR},
			</if>
			<if test="role != null">
				role = #{role,jdbcType=VARCHAR},
			</if>
			<if test="college != null">
				college = #{college,jdbcType=VARCHAR},
			</if>
			<if test="classNo != null">
				class_no = #{classNo,jdbcType=VARCHAR},
			</if>
			<if test="nativePlace != null">
				native_place = #{nativePlace,jdbcType=VARCHAR},
			</if>
			<if test="homeDetAdd != null">
				home_det_add = #{homeDetAdd,jdbcType=VARCHAR},
			</if>
			<if test="applyBackSch != null">
				apply_back_sch = #{applyBackSch,jdbcType=VARCHAR},
			</if>
			<if test="applyStatus != null">
				apply_status = #{applyStatus,jdbcType=VARCHAR},
			</if>
		</set>
		where id = #{id,jdbcType=INTEGER}
	</update>
	<update id="updateByPrimaryKey"
		parameterType="com.estelle.bean.Student">
		update student
		set no = #{no,jdbcType=VARCHAR},
		name = #{name,jdbcType=VARCHAR},
		tel = #{tel,jdbcType=VARCHAR},
		idcard = #{idcard,jdbcType=VARCHAR},
		gender = #{gender,jdbcType=VARCHAR},
		real_pwd = #{realPwd,jdbcType=VARCHAR},
		default_pwd = #{defaultPwd,jdbcType=VARCHAR},
		role = #{role,jdbcType=VARCHAR},
		college = #{college,jdbcType=VARCHAR},
		class_no = #{classNo,jdbcType=VARCHAR},
		native_place = #{nativePlace,jdbcType=VARCHAR},
		home_det_add = #{homeDetAdd,jdbcType=VARCHAR},
		apply_back_sch = #{applyBackSch,jdbcType=VARCHAR},
		apply_status = #{applyStatus,jdbcType=VARCHAR}
		where id = #{id,jdbcType=INTEGER}
	</update>

	<select id="selectByNo" resultMap="BaseResultMap"
		parameterType="String">
		select
		<include refid="Base_Column_List" />
		from student
		where no = #{no}
	</select>
	<select id="selectByName" resultMap="BaseResultMap"
		parameterType="String">
		select
		<include refid="Base_Column_List" />
		from student
		where name = #{name}
	</select>
	<select id="selectByNoNCollege" resultMap="BaseResultMap"
		parameterType="String">
		select
		<include refid="Base_Column_List" />
		from student
		where no = #{no}
		and college = #{college}
	</select>
	<select id="selectByNameNCollege" resultMap="BaseResultMap"
		parameterType="String">
		select
		<include refid="Base_Column_List" />
		from student
		where name = #{name}
		and college = #{college}
	</select>
	
</mapper>